{
	// Place your excel-in-one-hour workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"initial state": {
		"body": [
			"let initial: State = {",
			"  cols: alphabeticRange(\"A\", \"Z\"),",
			"  rows: numericRange(1, 15),",
			"  active: none,",
			"  cells: new Map()",
			"}"
		],
		"description": "Initial state of the App"
	},
	"Numeric and Alphabetic Ranges": {
		"body": [
			"const numericRange = (start:number, stop: number) => Array.from({length: (stop - start)}, (_, i) => start + i)",
			"const alphabeticRange = (start: string, stop: string) => numericRange(start.charCodeAt(0), stop.charCodeAt(0)).map( x => String.fromCharCode(x))"
		],
		"description": "Generate an arrays of numbers and char within the ranges"
	}
}