{
	// Place your excel-in-one-hour workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"initial state": {
		"body": [
			"const initial: State = {",
			"  cols: alphabeticRange(\"A\", \"Z\"),",
			"  rows: numericRange(1, 15),",
			"  active: none,",
			"  cells: {}",
			"}"
		],
		"description": "Initial state of the App",
		"scope": "typescript"
	},
	"position utility functions": {
		"body": [
			"const positionAsString = (position: Position) => `\\${position[0]}\\${position[1]}`",
			"const positionEquals = (p1: Position, p2: Position) => p1[0] === p2[0] && p1[1] === p2[1]"
		],
		"scope": "typescript",
		"description": "Position utility functions"
	},
	"parse and evaluate expression" : {
		"body": [
			"type Operator = '+' | '* '| '-' | '/'",
			"type Binary = [ Expr, Operator, Expr ] // A binary operation is a tuple of an expression, an operator and another expression",

			"type Value = number",

			"const Value = Number",

			"const isValue = (expr: Expr): expr is Value => typeof expr == 'number'",

			"type Expr = ",
			"  | Value",
			"  | Binary ",
			"let operator = P.alt(",
			"  P.string('+'),",
			"  P.string('*'),",
			"  P.string('-'),",
			"  P.string('/')",
			")",
			"",
			"",
			"const value: Parser<Value> = P.digits.map(Value)",
			"",
			"const binary: Parser<Binary> = P.seq(value, operator, value)",
			"",
			"const expr: Parser<Expr> = P.alt(binary, value)",
			"",
			"const evaluate = (expr: Expr): Value => {",
			"  if (isValue(expr)) {",
			"    return expr",
			"  } else {",
			"    let ops = {\"+\": add, \"*\": multiply, \"-\": minus, \"/\": divide}",
			"    const [l, op, r] = expr",
			"    const le = evaluate(l)",
			"    const re = evaluate(r)",
			"    return ops[op](le,re)",
			"  }",
			"}",
		]
	},
	"Numeric and Alphabetic Ranges": {
		"body": [
			"const numericRange = (start:number, stop: number) => Array.from({length: (stop - start)}, (_, i) => start + i)",
			"const alphabeticRange = (start: string, stop: string) => numericRange(start.charCodeAt(0), stop.charCodeAt(0)).map( x => String.fromCharCode(x))"
		],
		"description": "Generate an arrays of numbers and char within the ranges"
	},
	"Render input on click": {
		"body": [
			"const renderEditor = (value: String, position: Position, trigger: Trigger) => {",
			"  return html`",
			"    <td class=\"selected\">",
			"     <input ",
			"      value=\\${value} ",
			"     />",
			"    </td>",
			"  `",
			"}",
			"",
			"const renderView = (value: String, position: Position, trigger: Trigger) => {",
			"  return html`",
			"    <td onclick=${() => trigger(startEdit(position))}>\\${value}</td>",
			"  `",
			"}",
			"",
			"const renderCell = (state: State, position: Position, trigger: Trigger) =>{",
			"  const stringPosition = positionAsString(position)",
			"  const cell = state.cells[stringPosition]",
			"",
			"  return pipe(",
			"    state.active, ",
			"    match(",
			"      () => renderView(cell, position, trigger),",
			"      (active) => positionEquals(active, position) ? renderEditor(cell, position, trigger) : renderView(cell, position, trigger)",
			"    )",
			"  )",
			"}"
		]
	}
}